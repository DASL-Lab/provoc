[{"path":"https://dasl-lab.github.io/provoc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ProVoC authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"ProVoC Mission Statement","text":"ProVoC intended exploratory tool investigate validate input results lineage proportion estimation pipeline. tool implements various diagnostic tests input data model results. primary aims package : mutation frequency, coverage, lineage defining mutations example, whether mutations required differentiate BA.1 BA.2 present wastewater large enough quantities. Estimation proportions lineages concern Model diagnostics work common estimation procedures (Freyja, Alcov, etc.). intent facilitate standardized approach assessment model results wastewater data.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input Data","title":"ProVoC Mission Statement","text":"ProVoC designed data following format: Input data, processed short read sequencing wastewater samples. Note couple things: “count” number times mutation observed. “coverage” read depth loci mutation. “label” “mutation” column. ProVoC includes functions create standardized names mutations ensure smooth modelling. (Also note position 0-indexed, label mutation one-indexed. requirement, important keep mind.) multiple samples data frame. ProVoC set work - apply model separately unique sample. data mutations frequency zero. data processed specifically include mutations common least one sample, even weren’t observed samples. requirement package, ’s recommended practice multiple samples. column names required . ProVoC compatible output iVar pipeline. ProVoC also requires definition lineages : Lineage definitions format (matrix) compatible common modelling frameworks. Within provoc hard-coded historical definitions based constellations team defined PANGO lineages, function download store Usher Barcodes used Freyja. user can specify definitions well. functions estimation techniques, values can fractional. , mutation can 30% B.1.1.7 cases. discussed document, future version package account .","code":""},{"path":[]},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"basic-modelling","dir":"Articles","previous_headings":"Modelling","what":"Basic Modelling","title":"ProVoC Mission Statement","text":"models wastewater data come across generalizations linear modelling framework. Essentially, estimate proportion B.1.1.7 amounts fitting linear model frequency versus lineage definitions, .e. using frequency response variable B.1.1.7, B.1.617.2, P.1 covariates. Data format useful basic linear regression regression equation linear regression becomes: \\[ f = count / coverage = \\beta_\\alpha B.1.1.7 + \\beta_\\delta B.1.617.2 + \\beta_\\gamma P.1 \\] words, mutation present B.1.1.7 (.e., B.1.617.2 P.1 0) estimated frequency equal \\(\\beta_\\alpha\\), amounts saying \\(\\beta_\\alpha\\) represents proportion B.1.1.7 sample. linear modelling framework accounts shared mutations, adjusting estimates proportions appropriately. Note intercept model - physical interpretation intercept, model include . two main problems approach, along bonus third problem: estimates can negative, allowed proportions. estimates might add something 1, invalid proportions. (Bonus) modelling diagnostics linear regression model based normality assumption. Since frequency mutation must 0 1, assumption valid. problem estimates, means can’t use usual linear regression tools checking model’s fits.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"provoc-alcov-and-freyja","dir":"Articles","previous_headings":"Modelling","what":"ProVoC, Alcov, and Freyja","title":"ProVoC Mission Statement","text":"extensions linear models follows: number observed mutations (count) assumed come binomial distribution, number trials comes coverage probability success estimated linear model. , count mutation B.1.1.7 approximately equal proportion B.1.1.7 times coverage mutation. binomial distribution accounts coverage mutation, estimating proportions way models. estimation routine ensures proportions positive sum less 1. adjustment coverage essentially gives mutations coverage higher “weight”; errors estimating mutations low coverage penalized much fitting model. LASSO regression implementation ensures proportions positive. adjusts proportions happen sum 1. Uses non-negative regression ensure positive parameter estimates uses jacknife-like scheme find parameter estimates satisfy “sum--less--one” constraing. Currently, ProVoC implemented, base versions Freyja Alcov implemented allow comparison across models.","code":""},{"path":[]},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"data-only","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation","what":"Data-Only","title":"ProVoC Mission Statement","text":"methods described section applicable access input data.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"matching-data-to-lineage-definitions","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation > Data-Only","what":"Matching Data to Lineage Definitions","title":"ProVoC Mission Statement","text":"can model mutations lineage definition. Conversely, can use lineage definitions mutations model. data , 773 unique mutations data 51 mutations lineage assignments. ideal world, mean modelling based 51 mutations. However, 749 mutations data don’t appear lineage definitions. 27 mutations lineage definitions appear data. left 24 mutations data also appear lineage definitions. important information know prior modelling. separate problem occurs lineage definitions similar. Suppose lineage X contains mutations m1, m2, m3, lineage Y contains mutations m2, m3, m4. two lineages contain m2 m3, need know m1 m4 distinguish . mutations m1 m4 coverage data, lineages X Y indistinguishable. provoc includes function fuse() presents information user help make informed decisions modelling process.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"model-and-data","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation","what":"Model and Data","title":"ProVoC Mission Statement","text":"methods section apply access data can re-run analyses needed. Note provoc() function works similarly methods can used many investigations even methods used.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"confidence-intervals-for-model-parameters","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation > Model and Data","what":"Confidence Intervals for Model Parameters","title":"ProVoC Mission Statement","text":"normal linear model constraints, can obtain variance regression coefficients (\\(\\underline\\beta\\)) using formula \\((X^TX)^{-1}\\sigma^2\\), \\(X\\) lineage definition matrix \\(\\sigma^2\\) variance response variable. can used create confidence intervals, assume response normally distributed. case models discussed . Instead, two options: either use anyway check model fit, use bootstrapping. package, using bootstrapping. general, bootstrapping refers re-sampling original data create synthetic data sets similar statistical properties, fitting model new data sets. parameter estimates recorded, variance estimates practical construction CI. simply bootstrap rows data Table 1. row represents varying number observations original reads. example, mutation C913T observed 1191 times 2734 total short reads, T16176C observed 0 times 16765 short reads. Randomly removing one rows remove different amounts information depending row removed, resulting estimates properly capture confidence interval. Instead, data ideally resampled original scale. row mutation C913T converted 2,734 rows, 1,191 rows labelled TRUE rest false. represents coverage 2734 reads, 1191 mutation interest. done mutation, resulting data frame bootstrapped find CI estimates. computationally expensive, statistically equivalent procedure follows. total number reads data, sample coverages proportionally using multinomial distribution. coverages positions three mutations 2,000, 2,000, 6,000 three mutations, sample 10,000 observations multinomial probability position 1 set 20%, position 2 set 20% third position set 60%. may result , say, re-sampled coverage 1953 first position, 2004 second, 6043 third. statistically equivalent randomly resampling data set 2000 rows position 1,2000 position 2, 6000 position 3. counts generated binomial distribution. present example, suppose 800 reads position 1 contained mutation interest, giving frequency 0.4%. re-sampled coverage 1953, sample value binomial distribution 1953 trials probability success 0.4. procedure implemented provoc, equivalent procedure implemented Freyja (developed independently). calculate CI, procedure run least 100 times. 95%CI constructed finding middle 95% parameter estimate.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"bias-due-to-improper-lineage-specification","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation > Model and Data","what":"Bias Due to Improper Lineage Specification","title":"ProVoC Mission Statement","text":"many lineages, bound false positive. Since sum proportions exceed 1, false positive one place necessarily take away positive (whether true false) another. words, bias increases excess lineages. Conversely, suppose missing lineage present. assumption lineage shares mutations another lineage, estimate lineage biased upwards. words, bias increases missing lineages. concrete example, consider lineages , B, C mutations m1, m2, m3, m4, follows: example, can guess B proportion 0.25, C proportion 0. B present, mutations share expected 50% samples. However, exlcude , get estimate 0.375 (average frequencies mutations lineage B). erroneous exclusion means B’s estimate biased upwards. Conversely, suppose included varC estimation. proportion estimated 0, prediction m1 high, instead model need reduce estimate varA. erroneous inlusion C biased ’s estimate downwards. another potential issue including excluding lineages. table looked mutations 1 4 present lineages , B, C. introduced lineage D also included mutation 5, using another mutation estimation procedure. detect issues, provoc facilitates re-running analysis different lineages see effect remaining estimates.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"lineage-importance-measures","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation > Model and Data","what":"Lineage Importance Measures","title":"ProVoC Mission Statement","text":"standard modelling approaches, Variance Inflation Factor often used determine whether multiple predictors measuring thing. example, height weight present data set, measuring size subject individual effect height weight difficult ascertain. present circumstances, covariates either 0 1, standard VIF caclulation apply. Instead, check similarity via various comparisons two binary variables. also extend concept groups two lineages check whether one lineage can expressed linear combination lineages.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"sensitivity-to-lineage-definitions","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation > Model and Data","what":"Sensitivity to Lineage Definitions","title":"ProVoC Mission Statement","text":"addition sensitive similarity lineages, model results sensitive whether lineages defined correctly. inclusion , say C913T B.1.1.7 may based 99% lineages assigned B.1.1.7 containing mutation, might come 50% lineages containing mutation. usual linear regression diagnostics, concept “influence” measures much individual observation affects resultant parameters. bootstrap section, careful note row Table 1 represents varying amount observations, inappropriate use individual rows test effects observations. two options: use concepts bootstrap method (assume multinomial coverage binomial counts, conditional coverage), can use common diagnostics adjust according coverage. now, take second view. influence mutation parameter estimates can calculated according -called “hat” matrix, \\(X(X^TX)^{-1}X^T\\). resulting influence can divided count given mutation, giving influence per observation. provides single value per mutation can interpreted according many reads. Future versions package implement “bagging” estimate properly addresses aggregated nature data (count represents many observations), allows calculation influence mutation across many scenarios. estimate inspired random forests, columns rows bootstrapped.","code":""},{"path":[]},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"model-only-diagnostics","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation","what":"Model-Only Diagnostics","title":"ProVoC Mission Statement","text":"methods apply access model outputs, original data.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"in-sample-predictive-accuracy","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation > Model-Only Diagnostics","what":"In-Sample Predictive Accuracy","title":"ProVoC Mission Statement","text":"can express predictions according possible combinations lineages. three lineages, predictions mutations present first, second, third lineage, also mutations first second, first third, second third, three. Linear modelling assumes equal variance response values response, can use discrete set responses directly assess . previous studies, known generally variation excess model assume, especially normal distributions assumed also binomial distributions.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"out-of-sample-predictive-accuracy","dir":"Articles","previous_headings":"Diagnostics for Lineage Proportion Estimation > Model-Only Diagnostics","what":"Out-of-Sample Predictive Accuracy","title":"ProVoC Mission Statement","text":"model outputs access new data set, can make predictions new data. can use full lineage definitions matrix - even mutation present data used fit model, definition allows us extrapolate mutations. example , 27 mutations definitions used estimation. present new data set, still make predictions . example extrapolation, careful proportions expected (.e. expect lineages circulating rate), must careful calculating variance (depends coverage).","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/Package_Overview.html","id":"notes-on-implementation","dir":"Articles","previous_headings":"","what":"Notes on Implementation","title":"ProVoC Mission Statement","text":"end document notes implementation methods described . philosophy package work similar generalized linear models using mgcv package. created object classes users familiar mgcv package able analyze data expect, well also extending analysis diagnostics particular lineage abundance estimation. created classes methods work expected can easily interoperated. example, results Freyja can loaded object type provoc, model-based diagnostics can applied expected. implemented simplified versions modeling approaches can get approximate results using exact methodology, including bootstrap confidence intervals measures influence. conclusion, package make easy investigate input output models lineage abundances wastewater data. extends models beyond ones developed, package maintained extended according user feedback.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/mutation_definitions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Lineage Definitions in ProVoC","text":"vignette demonstrates different ways defining comparing lineage definitions, including discussion matters.","code":""},{"path":"https://dasl-lab.github.io/provoc/articles/mutation_definitions.html","id":"data-prep","dir":"Articles","previous_headings":"","what":"Data Prep","title":"Lineage Definitions in ProVoC","text":"package contains data Baaijens et al. (2022), downloaded NCBI SRA processed via custom pipeline (heavily based GromStole, post-processing). paper, explicitly look B.1.1.7, B.1.427, B.1.429, B.1.526. ’m going add B.1.617.2 list, take list given (another vignette written test assumption). make code run faster, ’ll look every third day data.","code":"#library(provoc) devtools::load_all() ## ℹ Loading provoc library(lubridate) # ymd() ##  ## Attaching package: 'lubridate' ##  ## The following objects are masked from 'package:base': ##  ##     date, intersect, setdiff, union library(here) # all paths relative to .git folder ## here() starts at /Users/dbecker/git/DASL/provoc data(Baaijens)  Baaijens$date <- ymd(Baaijens$date) dates <- sort(unique(Baaijens$date)) dates3 <- (1:floor(length(dates) / 3)) * 3 dates <- dates[dates3]  b3 <- Baaijens[Baaijens$date %in% dates,      c(\"count\", \"coverage\", \"sra\", \"date\", \"label\")] b3$mutation <- parse_mutations(b3$label) head(b3) ##     count coverage         sra       date   label        mutation ## 774  6404    16595 SRR15505103 2021-01-17  ~5700A aa:orf1a:A1812D ## 775 11407    12071 SRR15505103 2021-01-17 ~23401T      aa:S:Q613H ## 776 12519    12661 SRR15505103 2021-01-17 ~23403G      aa:S:D614G ## 777 20293    20794 SRR15505103 2021-01-17 ~14408T  aa:orf1b:P314L ## 778  1885     3207 SRR15505103 2021-01-17 ~16500C aa:orf1b:Q1011H ## 779  4233     4265 SRR15505103 2021-01-17  ~3037T          C3037T"},{"path":"https://dasl-lab.github.io/provoc/articles/mutation_definitions.html","id":"built-in-constellation-files","dir":"Articles","previous_headings":"","what":"Built-in Constellation Files","title":"Lineage Definitions in ProVoC","text":"PANGO team used maintain GitHub repository called “Constellations” (“Cov-Lineages/Constellations” 2023), contained mutations believed --less unique lineages. longer updated, useful historical analyses. set lineage definitions available via astronomize() function. matrix, rows represent lineages columns represent mutations, 1 representing presence mutation given lineage. Notice use filter_lineages(). function gets rows corresponding lineages, also ensures dealing columns least one “1”. words, uses mutations present least one lineage. written function visualize matrix:  shared mutations shown, last column indicating many unique mutations remain definition. Every mutation gets grey background make easier follow mutation matrices larger.","code":"astro <- astronomize() |>     filter_lineages(c(\"B.1.1.7\", \"B.1.427\", \"B.1.429\", \"B.1.526\", \"B.1.617.2\")) dim(astro) ## [1]  5 69 astro[, 1:5] ##           aa:S:L452R aa:orf3a:Q57H aa:orf1a:T265I C3037T aa:S:D614G ## B.1.526            0             1              1      1          1 ## B.1.1.7            0             0              0      0          0 ## B.1.429            1             1              1      1          1 ## B.1.617.2          1             0              0      0          0 ## B.1.427            1             1              1      1          1 plot_lineage_defs(astro)"},{"path":"https://dasl-lab.github.io/provoc/articles/mutation_definitions.html","id":"usher-barcodes","dir":"Articles","previous_headings":"","what":"Usher Barcodes","title":"Lineage Definitions in ProVoC","text":"Freyja (Karthikeyan et al. 2022; “Andersen-Lab/Freyja” 2024) repository keeps --date barcodes file, serves purpose definitions constellations. usher_barcodes() function check file, download ’s present number common locations. ’s quite large file, recommend storing file using filter_lineages() function.","code":"bar <- provoc::usher_barcodes(path = \"working\") |>     filter_lineages(c(\"B.1.1.7\", \"B.1.427\", \"B.1.429\", \"B.1.526\", \"B.1.617.2\")) dim(bar) ## [1]  5 62"},{"path":"https://dasl-lab.github.io/provoc/articles/mutation_definitions.html","id":"constellations-versus-barcodes","dir":"Articles","previous_headings":"","what":"Constellations versus Barcodes","title":"Lineage Definitions in ProVoC","text":"Let’s quickly look mutations present astro bar, mutations present bar astro, well mutations .  plot, can see quite mutations defined astro bar. blue bars indicate mutation used lineage definition bar astro; four mutations defined B.1.1.7 B.1.617.2 usher barcodes present constellations file, two mutations also present B.1.429. barcodes seem little bit lenient mutations include; constellations tried get --less “unique” mutations.","code":"plot_lineage_defs2(astro, bar,     main = \"Constellations (red) versus Usher Barcodes (blue)\")"},{"path":"https://dasl-lab.github.io/provoc/articles/mutation_definitions.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Lineage Definitions in ProVoC","text":"Since chose lineages choosing lineage definitions, can use convenient “~ .” notation fit models lineages. Note Baaijens data processed way sample contains mutations. means bar see based exact set mutations. isn’t necessary, believe improves interpretability results.  two different looking plots! saw lineage definitions different, let’s check actually used data. function can used , extracts lineage definitions actually used (ignoring mutations part definition present data).  result, can see constellations used four mutations define B.1.617.2! barcodes used 6! 4 (6) mutations B.1.617.2 also present data. Let’s dig little deeper .   two different matrices different definitions B.1.617.2, explains difference results. Furthermore, B.1.427 B.1.429 important differences - barcodes mutations overlap, meaning “de-mixing” algorithm must choose one . ’ll expand “Choosing Lineages Search ” vignette.","code":"library(ggplot2) library(patchwork) # Patching ggplots together res_astro <- provoc(count / coverage ~ .,     lineage_defs = astro,     data = b3, by = \"sra\") res_astro$date <- ymd(res_astro$date) res_bar <- provoc(count / coverage ~ .,     lineage_defs = bar,     data = b3, by = \"sra\") res_bar$date <- ymd(res_bar$date)  gg_astro <- autoplot(res_astro, date_col = \"date\") +     labs(title = \"Constellations\") gg_bar <- autoplot(res_bar, date_col = \"date\") +     labs(title = \"Usher Barcodes\")  gg_astro / gg_bar + plot_layout(guides = \"collect\") &     theme_bw() &     facet_wrap(~ lineage, nrow = 1) plot_lineage_defs2(res_astro, res_bar,     main = \"Constellations (red) versus Usher Barcodes (blue)\") plot_actual_defs(res_astro, main = \"Constellations\") plot_actual_defs(res_bar, main = \"Usher Barcodes\")"},{"path":"https://dasl-lab.github.io/provoc/articles/mutation_definitions.html","id":"lapis-cov-spectrum","dir":"Articles","previous_headings":"","what":"LAPIS (CoV-Spectrum)","title":"Lineage Definitions in ProVoC","text":"Since managed find get API key, mutations within lineage manually downloaded cov-spectrum.org (Chen et al. 2022). set date range go 2020-01-01 2021-04-27, latter last sample Baaijens data. following code hopefully going change soon. API key nice, desperately need better mutation processing. , however, comforting column names match bar, least parsing consistent!  looks little different . 4 mutations seem every lineage, doesn’t give de-mixing algorithm information lineages present. B.1.1.7 seems lot unique mutations, might make results accurate (mutations truly unique B.1.1.7). Let’s quickly check compares barcodes:  couple mutations astro bar, couple bar astro. expected. However, red bars shared mutation section noteworthy! four mutations saw plot , told us de-mixing algorithm hard time differentiating lineages. Let’s check results.  Usher Barcodes Cov-Spectrum generally agree, ’s going B.1.617.2??? sort looks like B.1.429 taken weight B.1.617.2, worth looking . example, B.1.429 mutations B.1.617.2? comparison plot, appear lot mutations differentiate B.1.429 B.1.617.2, can’t . Maybe ’s coverage?  doesn’t look like mutations differentiate B.1.617.2 B.1.429 low coverage. minimum average coverages across samples1 isn’t low shared mutations. think primary conclusion difference mutations barcodes lapis definitions important enough demixing algorithm give differences results. Perhaps next plotting function make show something frequencies mutations lineage.","code":"lineages <- c(\"B.1.1.7\", \"B.1.427\", \"B.1.429\", \"B.1.526\", \"B.1.617.2\") lapis_list <- lapply(lineages, function(x) {     file <- read.csv(here(\"working\", paste0(x, \".csv\")))     file$mutation[file$proportion > 0.8] }) names(lapis_list) <- lineages lapis <- lineage_defs_from_list(lapis_list)  # Avoiding parsing deletions, only looking at substitutions lapis <- lapis[, !grepl(\"-\", colnames(lapis))] # TODO: user-friendly parsing colnames(lapis) <- sapply(colnames(lapis), function(x) {     provoc:::parse_mutation(         type = \"~\",         pos = substr(x, 2, nchar(x) - 1),         alt = substr(x, nchar(x), nchar(x))) })  plot_lineage_defs(lapis) plot_lineage_defs2(bar, astro) res_lapis <- provoc(count / coverage ~ .,     lineage_defs = lapis,     data = b3, by = \"sra\") res_lapis$date <- ymd(res_lapis$date)  gg_lapis <- autoplot(res_lapis, date_col = \"date\") +     labs(title = \"LAPIS (CoV-Spectrum)\")  gg_astro / gg_bar / gg_lapis + plot_layout(guides = \"collect\") &     theme_bw() &     facet_grid(~ lineage) plot_actual_defs(res_lapis)"},{"path":"https://dasl-lab.github.io/provoc/articles/mutation_definitions.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Lineage Definitions in ProVoC","text":"Hopefully vignette successfully completed two goals: Demonstrate functionality provoc lineage definitions. Demonstrate importance choosing good lineage definitions!","code":""},{"path":[]},{"path":"https://dasl-lab.github.io/provoc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Devan Becker. Author, maintainer. Jeremy Faria. . Daner Yasin. .","code":""},{"path":"https://dasl-lab.github.io/provoc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker D (2024). provoc: Proportions Variants Concern Counts Coverage list Mutations Reference Variants Mutations may Come . R package version 0.5.4.","code":"@Manual{,   title = {provoc: Proportions of Variants of Concern from Counts and Coverage of a list of Mutations and a Reference for Which Variants Those Mutations may Come From},   author = {Devan Becker},   year = {2024},   note = {R package version 0.5.4}, }"},{"path":"https://dasl-lab.github.io/provoc/index.html","id":"provoc","dir":"","previous_headings":"","what":"Proportions of Variants of Concern from Counts and Coverage of a list of Mutations and a Reference for Which Variants Those Mutations may Come From","title":"Proportions of Variants of Concern from Counts and Coverage of a list of Mutations and a Reference for Which Variants Those Mutations may Come From","text":"PROportions Variants Concern using counts, coverage, lineage definition matrix. Builds diagnoses model based : Counts: number times given mutation observed. Coverage: number times position given mutation read. Mutation names: whatever format want, long match names lineage definition matrix. example: Usher Barcodes current methods accept fractional entries.","code":""},{"path":"https://dasl-lab.github.io/provoc/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Proportions of Variants of Concern from Counts and Coverage of a list of Mutations and a Reference for Which Variants Those Mutations may Come From","text":"two steps using software: create lineage definitions run model(s). specified, lineage definitions uses hardcoded definitions cov-lineages/constellations repo, contains representative mutations identified PANGO team. lineage definitions must names match exists data. main fitting function designed mimic glm(), formula notation emphasizes connection binomial GLM models. bootstrap_samples argument optional, used calculate confidence intervals correlation parameters. created class provoc objects convenient methods. example, plotting results achieved follows:  use convention autoplot() function creates ggplot2 plot based particular type data. allows ggplot2’s fanciness top pre-made plot.","code":"#library(provoc) devtools::load_all() ℹ Loading provoc data(Baaijens) b1 <- Baaijens [Baaijens$sra == Baaijens$sra[1], ] b1$mutation <- parse_mutations(b1$label)  head(b1[, c(\"count\", \"coverage\", \"mutation\", \"label\")]) count coverage        mutation   label 1 14458    14818      aa:S:D614G ~23403G 2 10431    32699         C12025T ~12025T 3   759     9577         G29266A ~29266A 4 23329    23690  aa:orf1a:T265I  ~1059T 5  6935    32631       aa:M:R44S ~26654T 6 13866    27715 aa:orf1a:L3352F ~10319T res <- provoc(     formula = count / coverage ~ B.1.1.7 + B.1.429 + B.1.617.2 +          B.1.427 + AY.4 + P.1,     data = b1,     bootstrap_samples = 100) res Call: count/coverage ~ B.1.1.7 + B.1.429 + B.1.617.2 + B.1.427 + AY.4 +      P.1  Mutations in lineage definitions:  325  Mutations used in analysis/mutations in data: 74/772  All models converged.  Top 5 lineages:      rho   ci_low  ci_high   lineage 5  0.515 5.09e-01 5.20e-01      AY.4 2   0.33 3.23e-01 3.38e-01   B.1.429 4  0.124 1.18e-01 1.30e-01   B.1.427 1  0.008 7.17e-03 8.05e-03   B.1.1.7 3 <0.001 1.06e-09 9.55e-05 B.1.617.2 plot(res) library(ggplot2) autoplot(res) +     theme_bw() +     labs(title = \"Results for one sample\") plot_resids(res) summary(res) Call: count/coverage ~ B.1.1.7 + B.1.429 + B.1.617.2 + B.1.427 + AY.4 +      P.1  Deviance Residuals:     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  -10.3051  -1.9998   0.0000  -0.7594   0.0000   8.1775   Mutations in lineage definitions: 325  Mutations used in analysis/mutations in data: 74/772  Coefficients:            rho       ci_low      ci_high   lineage 1 7.599439e-03 7.173164e-03 8.049933e-03   B.1.1.7 2 3.301205e-01 3.233184e-01 3.375335e-01   B.1.429 3 9.512833e-09 1.061044e-09 9.550969e-05 B.1.617.2 4 1.242872e-01 1.178179e-01 1.301443e-01   B.1.427 5 5.150303e-01 5.094964e-01 5.196631e-01      AY.4  Correlation of coefficients:               B.1.1.7     B.1.429   B.1.617.2     B.1.427        AY.4 B.1.1.7    1.00000000  0.02244543  0.17031546  0.06300633 -0.16706950 B.1.429    0.02244543  1.00000000  0.14322947 -0.90597430 -0.08516734 B.1.617.2  0.17031546  0.14322947  1.00000000 -0.10752381 -0.07479276 B.1.427    0.06300633 -0.90597430 -0.10752381  1.00000000  0.14240372 AY.4      -0.16706950 -0.08516734 -0.07479276  0.14240372  1.00000000 plot_lineages(res)"},{"path":"https://dasl-lab.github.io/provoc/index.html","id":"multiple-samples","dir":"","previous_headings":"","what":"Multiple Samples","title":"Proportions of Variants of Concern from Counts and Coverage of a list of Mutations and a Reference for Which Variants Those Mutations may Come From","text":"Note “” argument . tells provoc() fit model separately sample defined column. Since 30 samples, model takes run, hence bootstrap samples .  plotting functions work expected.    addition, ’ve added special functionality data “date” column:  Since autoplot() returns ggplot2 object, can use knowledge ggplot2:  Finally, residual plot still works (although ’s bunch samples stuffed one plot, use limited.)","code":"# First thirty samples from Baaijens b2 <- Baaijens [Baaijens$sra %in% unique(Baaijens$sra)[1:30], ] b2$mutations <- parse_mutations(b2$label) head(b1[, c(\"count\", \"coverage\", \"mutation\", \"label\", \"sra\")]) count coverage        mutation   label         sra 1 14458    14818      aa:S:D614G ~23403G SRR15505102 2 10431    32699         C12025T ~12025T SRR15505102 3   759     9577         G29266A ~29266A SRR15505102 4 23329    23690  aa:orf1a:T265I  ~1059T SRR15505102 5  6935    32631       aa:M:R44S ~26654T SRR15505102 6 13866    27715 aa:orf1a:L3352F ~10319T SRR15505102 system.time(     res <- provoc(         formula = count / coverage ~ B.1.1.7 + B.1.429 + B.1.617.2 +             B.1.427 + AY.4 + P.1,         data = b2,          by = \"sra\",         bootstrap_samples = 0) ) user  system elapsed    1.446   0.017   1.482 res Call: count/coverage ~ B.1.1.7 + B.1.429 + B.1.617.2 + B.1.427 + AY.4 +      P.1  Mutations in lineage definitions:  325  Summary of percent of mutations in data used:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  0.09585 0.09585 0.09585 0.09585 0.09585 0.09585   All models converged.  Top 6 lineages:       rho ci_low ci_high lineage         sra avg_spot_len sample_name     bases 61  0.899     NA      NA B.1.1.7 SRR15505114          302         FX2 385650980 15  0.846     NA      NA    AY.4 SRR15505104          302         DR2 412520222 139  0.84     NA      NA B.1.427 SRR15505129          302         FE1 339620744 114 0.709     NA      NA B.1.427 SRR15505124          302         FK2 433136554 50  0.695     NA      NA    AY.4 SRR15505111          302         GC1 484282368 35  0.687     NA      NA    AY.4 SRR15505108          302         GF2 615765014      bioproject       date 61  PRJNA741211 2021-04-11 15  PRJNA741211 2021-01-15 139 PRJNA741211 2021-03-16 114 PRJNA741211 2021-03-24 50  PRJNA741211 2021-04-17 35  PRJNA741211 2021-04-23 plot_lineages(res) plot(res) plot_resids(res) autoplot(res) theme_set(theme_bw()) res$date <- lubridate::ymd(res$date) autoplot(res, date_col = \"date\") autoplot(res, date_col = \"date\") +     facet_wrap(~ lineage, nrow = 1) +     labs(title = \"Proportions of Lineages over Time\") +     theme(axis.text.x = element_text(angle = 45, hjust = 1)) plot_resids(res)"},{"path":"https://dasl-lab.github.io/provoc/index.html","id":"searching-for-different-lineages","dir":"","previous_headings":"","what":"Searching for Different Lineages","title":"Proportions of Variants of Concern from Counts and Coverage of a list of Mutations and a Reference for Which Variants Those Mutations may Come From","text":"Notice two important points: Erroneously increasing one means decreasing true lineages. Erroneously decreasing one means increasing lineages. provoc also accepts ~ . formula notation. useful want manipulate lineages lineage definitions matrix, easier programmatically dealing formulae R. filter_lineages() function remove mutations present remaining lineages. definitions, can just use :","code":"library(patchwork) res_with <- provoc(cbind(count, coverage) ~ B.1.1.7 + B.1.429 + B.1.617.2 + B.1.427,     data = b2, by = \"sra\",     verbose = FALSE, bootstrap_samples = 0) res_with$date <- lubridate::ymd(res_with$date)  res_without <- provoc(cbind(count, coverage) ~ B.1.429 + B.1.617.2 + B.1.427,     data = b2, by = \"sra\",     verbose = FALSE, bootstrap_samples = 0) res_without$date <- lubridate::ymd(res_without$date)  g_with <- autoplot(res_with, date_col = \"date\") +     scale_fill_manual(values = 2:5) g_without <- autoplot(res_without, date_col = \"date\") +     scale_fill_manual(values = 3:5)  g_with / g_without lineage_defs <- provoc::usher_barcodes(path = \"working\") |>     filter_lineages(c(\"B.1.1.7\", \"B.1.617.2\", \"B.1.427\",         \"B.1.429\", \"AY.4\", \"BA.4\", \"BA.5\")) res_all <- provoc(count / coverage ~ ., data = b1,      bootstrap_samples = 0,     lineage_defs = lineage_defs)  plot_lineages(res_all)"},{"path":"https://dasl-lab.github.io/provoc/index.html","id":"version-roadmap","dir":"","previous_headings":"","what":"Version Roadmap","title":"Proportions of Variants of Concern from Counts and Coverage of a list of Mutations and a Reference for Which Variants Those Mutations may Come From","text":"0.5: Current version Standardize use “lineage” everywhere (except “variant concern”) Correct documentation errors vestiges Documentation overhaul standardization Trim fat! Many functions deprecated marked . General ease use fitting multiple models, checking lineage definitions, checking diagnostics. Dealing residuals (raw deviance) multiple samples. Proper diagnostics, easily applied samples Maybe add multiprovoc class functions know handle things? , add relevant functionality based whether “” column one unique value. Potentially loading Freyja output files provoc objects Stacking (cbind()) models ease comparison Import process iVar data, mutation processing functions. Main function works multiple methods data sources. Unified parse_mutations() function minimal user input. Shiny app interact lineage defitions Shiny app interact results Clean functions attempt computational speedups functions unit-tested debugged Vignettes fully built documentation --date built via pkgdown [ ]","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/Baaijens.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from bioproject PRJNA741211 (Baaijens et al. (2022)) — Baaijens","title":"Data from bioproject PRJNA741211 (Baaijens et al. (2022)) — Baaijens","text":"Includes 52 different samples single file, sample specified \"sra\" column. Data processed according custom pipeline https::/github.com/DASL-Lab/data-treatment-plant. data processed mutation frequency 10% sample ensured samples. , C703T ever reached frequency 10% , present samples (even 0 observations) correct coverage position 703.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/Baaijens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from bioproject PRJNA741211 (Baaijens et al. (2022)) — Baaijens","text":"","code":"Baaijens"},{"path":"https://dasl-lab.github.io/provoc/reference/Baaijens.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from bioproject PRJNA741211 (Baaijens et al. (2022)) — Baaijens","text":"object class data.frame 45607 rows 11 columns.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/Baaijens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from bioproject PRJNA741211 (Baaijens et al. (2022)) — Baaijens","text":"label column proprietary format, \"~\" representing SNP \"-\" \"+\" representing deletions insertions, respectively. code parse_mutations(Baaijens$label) provide mutations amino acid format, used throughout package.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/Baaijens.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data from bioproject PRJNA741211 (Baaijens et al. (2022)) — Baaijens","text":"Baaijens, Jasmijn ., Alessandro Zulli, Isabel M. Ott, Ioanna Nika, Mart J. van der Lugt, Mary E. Petrone, Tara Alpert, Joseph R. Fauver, Chaney C. Kalinich, Chantal B. F. Vogels, Mallery . Breban, Claire Duvallet, Kyle . McElroy, Newsha Ghaeli, Maxim Imakaev, Malaika F. Mckenzie-Bennett, Keith Robison, Alex Plocik, Rebecca Schilling, Martha Pierson, Rebecca Littlefield, Michelle L. Spencer, Birgitte B. Simen, Ahmad Altajar, Anderson F. Brito, Anne E. Watkins, Anthony Muyombwe, Caleb Neal, Chen Liu, Christopher Castaldi, Claire Pearson, David R. Peaper, Eva Laszlo, Irina R. Tikhonova, Jafar Razeq, Jessica E. Rothman, Jianhui Wang, Kaya Bilguvar, Linda Niccolai, Madeline S. Wilson, Margaret L. Anderson, Marie L. Landry, Mark D. Adams, Pei Hui, Randy Downing, Rebecca Earnest, Shrikant Mane, Steven Murphy, William P. Hanage, Nathan D. Grubaugh, Jordan Peccia, Michael Baym, Yale SARS-CoV-2 Genomic Surveillance Initiative. 2022. “Lineage Abundance Estimation SARS-CoV-2 Wastewater Using Transcriptome Quantification Techniques.” Genome Biology 23(1):236. doi: 10.1186/s13059-022-02805-9.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/add_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Add coverage of missing mutations to a data set — add_coverage","title":"Add coverage of missing mutations to a data set — add_coverage","text":"observation 0 mutations 1 read different amount information 0 mutations 1,000 reads. function adds coverage mutations used lineage_defs, benefits models (adds 0-inflation).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/add_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add coverage of missing mutations to a data set — add_coverage","text":"","code":"add_coverage(coco, coverage, mutation_list)"},{"path":"https://dasl-lab.github.io/provoc/reference/add_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add coverage of missing mutations to a data set — add_coverage","text":"coco data set. coverage coverage file, position first column coverage second. mutation_list mutations added (usually colnames(lineage_defs)).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/add_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add coverage of missing mutations to a data set — add_coverage","text":"coco, added rows. counts assumed 0 mutations data.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/add_coverage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add coverage of missing mutations to a data set — add_coverage","text":"Currently assumes data column labelled \"mutation\" amino acid notation.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/astronomize.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract mutation list from a directory of constellation files. — astronomize","title":"Extract mutation list from a directory of constellation files. — astronomize","text":"\"Constellations\" files produced https://github.com/cov-lineages/constellations, represent cov-lineage team's best knowledge mutations define lineage. See details.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/astronomize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract mutation list from a directory of constellation files. — astronomize","text":"","code":"astronomize(path = NULL)"},{"path":"https://dasl-lab.github.io/provoc/reference/astronomize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract mutation list from a directory of constellation files. — astronomize","text":"path Path constellations folder cov-lineages/constellations repository. NULL, built-definitions used. need clone repo unless want updated definitions.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/astronomize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract mutation list from a directory of constellation files. — astronomize","text":"lineage definition matrix use provoc.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/astronomize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract mutation list from a directory of constellation files. — astronomize","text":"constellations repo longer updated new variants. Code adapted scripts/estimate-freqs.R https://github.com/PoonLab/gromstole. repo, constellation \"collection mutations functionally meaningful, may arise independently number times\". Updated version 0.5.0: constellation files hardcoded provoc, longer need clone repository. path provided, function uses repository. useful , say, clone historical version repo ensure 'r eworking definitions known time.","code":""},{"path":[]},{"path":"https://dasl-lab.github.io/provoc/reference/astronomize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract mutation list from a directory of constellation files. — astronomize","text":"","code":"# After cloning the constellations repo lineage_defs <- astronomize(path = \"../constellations\") #> Warning: Path does not exist. Using built-in definitions. dim(lineage_defs) #> [1]  37 325 lineage_defs <- filter_lineages(lineage_defs, c(\"B.1.1.7\", \"B.1.617.2\")) dim(lineage_defs) # rows and columns have changed #> [1]  2 36"},{"path":"https://dasl-lab.github.io/provoc/reference/autoplot.provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a provoc object using ggplot2 — autoplot.provoc","title":"Plot a provoc object using ggplot2 — autoplot.provoc","text":"Plots results estimating wastewater prevalence SARS-CoV-2. Optionally plots results time given date column.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/autoplot.provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a provoc object using ggplot2 — autoplot.provoc","text":"","code":"# S3 method for provoc autoplot(provoc_obj, date_col = NULL)"},{"path":"https://dasl-lab.github.io/provoc/reference/autoplot.provoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a provoc object using ggplot2 — autoplot.provoc","text":"provoc_obj Resulting object class provoc used plotting. date_col Optional - date column, results plotted time. can problematic multiple samples time point.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/autoplot.provoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a provoc object using ggplot2 — autoplot.provoc","text":"","code":"data(Baaijens) b10 <- Baaijens[Baaijens$sra %in% unique(Baijens$sra)[1:10], ] #> Error in unique(Baijens$sra): object 'Baijens' not found b10$mutations <- parse_mutations(b10$label) #> Error in unique(labels): object 'b10' not found res <- provoc(count / coverage ~ B.1.1.7 + B.1.617.2,     data = b10, by = \"sra\") #> Error in provoc(count/coverage ~ B.1.1.7 + B.1.617.2, data = b10, by = \"sra\"): object 'b10' not found res$date <- lubridate::ymd(res$date) #> Error in lapply(list(...), .num_to_date): object 'res' not found autoplot(res, date_col = \"date\") #> Error in autoplot(res, date_col = \"date\"): could not find function \"autoplot\""},{"path":"https://dasl-lab.github.io/provoc/reference/constant_with_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds all columns of the data that are constant with the specified by group — constant_with_by","title":"Finds all columns of the data that are constant with the specified by group — constant_with_by","text":"Finds columns data constant specified group","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/constant_with_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds all columns of the data that are constant with the specified by group — constant_with_by","text":"","code":"constant_with_by(data, by)"},{"path":"https://dasl-lab.github.io/provoc/reference/constant_with_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds all columns of the data that are constant with the specified by group — constant_with_by","text":"data Data frame containing count, coverage, lineage columns. Column name group process data.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/constant_with_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds all columns of the data that are constant with the specified by group — constant_with_by","text":"dataframe columns constant ","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/constellation_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Lists of mutations per lineage, as per Constellations — constellation_lists","title":"Lists of mutations per lineage, as per Constellations — constellation_lists","text":"names mutations according Pangolin's \"Constellations\" files. current October 2024. constellation files pre-Omicron lineages expected change.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/constellation_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lists of mutations per lineage, as per Constellations — constellation_lists","text":"","code":"constellation_lists"},{"path":"https://dasl-lab.github.io/provoc/reference/constellation_lists.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lists of mutations per lineage, as per Constellations — constellation_lists","text":"data frame","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/constellation_lists.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lists of mutations per lineage, as per Constellations — constellation_lists","text":"https://github.com/cov-lineages/constellations","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/coverage_at_aa.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coverage at mutation positions. — coverage_at_aa","title":"Get coverage at mutation positions. — coverage_at_aa","text":"Currently requires \"aa\" notation.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/coverage_at_aa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coverage at mutation positions. — coverage_at_aa","text":"","code":"coverage_at_aa(coverage, aa)"},{"path":"https://dasl-lab.github.io/provoc/reference/coverage_at_aa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coverage at mutation positions. — coverage_at_aa","text":"coverage data frame columns labelled \"position\" (0-indexed) \"coverage\". aa vector mutations. aa:orf1a:I300V, ins:28215:3, del:27378:25, C703T","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/coverage_at_aa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get coverage at mutation positions. — coverage_at_aa","text":"Finds maximum coverage three positions amino acid. ensures number observed mutations can never larger coverage.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/coverage_by_lineage_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise coverage by lineage/mutation combo — coverage_by_lineage_defs","title":"Summarise coverage by lineage/mutation combo — coverage_by_lineage_defs","text":"Useful finding whether calls based less information","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/coverage_by_lineage_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise coverage by lineage/mutation combo — coverage_by_lineage_defs","text":"","code":"coverage_by_lineage_defs(provoc_obj, fun = mean, ...)"},{"path":"https://dasl-lab.github.io/provoc/reference/coverage_by_lineage_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise coverage by lineage/mutation combo — coverage_by_lineage_defs","text":"provoc_obj Result provoc(). fun function used summarise coverage information. ... arguments passed onto fun(), prob = 0.5 find median fun = quantile.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/coverage_by_lineage_defs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise coverage by lineage/mutation combo — coverage_by_lineage_defs","text":"matrix total column row names lineage defs, entries indicating number analyses used mutation lineage.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/differ_by_one_or_less.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds if two vectors only differ between one mutation — differ_by_one_or_less","title":"Finds if two vectors only differ between one mutation — differ_by_one_or_less","text":"Finds two vectors differ one mutation","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/differ_by_one_or_less.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds if two vectors only differ between one mutation — differ_by_one_or_less","text":"","code":"differ_by_one_or_less(v1, v2)"},{"path":"https://dasl-lab.github.io/provoc/reference/differ_by_one_or_less.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds if two vectors only differ between one mutation — differ_by_one_or_less","text":"v1 vector comparison v2 vector comparison","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/differ_by_one_or_less.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds if two vectors only differ between one mutation — differ_by_one_or_less","text":"TRUE, differ one mutation","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/extant_lineages.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter lineages active on a given date. — extant_lineages","title":"Filter lineages active on a given date. — extant_lineages","text":"Using NGSB data (see ?mutations_by_lineage), checks earliest sequence lineage observed start_date. Optionally checks latest sequence lineage observed start_date. Optionally checks lineage ever observed Canada.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/extant_lineages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter lineages active on a given date. — extant_lineages","text":"","code":"extant_lineages(   lineage_names,   start_date,   check_after = TRUE,   check_canada = FALSE )"},{"path":"https://dasl-lab.github.io/provoc/reference/extant_lineages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter lineages active on a given date. — extant_lineages","text":"lineage_names character vector lineage names. Must match names mutations_by_lineage. start_date Earliest date study. Must ISO-8601 format (dates exceptions). check_after Check observed sequence start study? Set FALSE start date recent. check_canada Checks lineage ever observed Canada. Default FALSE.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/extant_lineages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter lineages active on a given date. — extant_lineages","text":"character vector.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/extant_lineages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter lineages active on a given date. — extant_lineages","text":"code also ignores + symbols anything , lineages B.1.617.2+K417N (Delta+) treated B.1.617.2 (Delta).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/extant_lineages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter lineages active on a given date. — extant_lineages","text":"","code":"# BA.1 was only observed as of January 2021 provoc:::extant_lineages(c(\"B.1.1.7\", \"B.1.617.2\", \"BA.1\"), start_date = \"2020-12-01\") #> [1] \"B.1.1.7\"   \"B.1.617.2\"  # Subset lineage defs by date: data(Baaijens) b1 <- Baaijens[Baaijens$sra == Baaijens$sra[1], ] max_date <- max(b1$date) lineage_defs <- astronomize() lins_to_check <- provoc:::extant_lineages(rownames(lineage_defs), max_date) lineage_defs <- provoc::filter_lineages(lineage_defs, lins_tocheck) #> Error in provoc::filter_lineages(lineage_defs, lins_tocheck): object 'lins_tocheck' not found dim(lineage_defs) #> [1]  37 325"},{"path":"https://dasl-lab.github.io/provoc/reference/extract_formula_components.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Formula Components — extract_formula_components","title":"Extract Formula Components — extract_formula_components","text":"Extracts processes components formula provided provoc function.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/extract_formula_components.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Formula Components — extract_formula_components","text":"","code":"extract_formula_components(formula, data, lineage_defs, mutation_col, by_col)"},{"path":"https://dasl-lab.github.io/provoc/reference/extract_formula_components.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Formula Components — extract_formula_components","text":"formula formula input user. data dataframe containing dataset. lineage_defs matrix containing mutation definitions. mutation_col column containing mutations. by_col column group data .","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/extract_formula_components.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Formula Components — extract_formula_components","text":"list containing data, dataframe filtered based formula's LHS lineage_defs, matrix filtered include mutations formula's RHS","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/extract_formula_components.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Formula Components — extract_formula_components","text":"","code":"# This function is internally used and not typically called by the user."},{"path":"https://dasl-lab.github.io/provoc/reference/filter_lineages.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter lineage_defs for specific lineages, keeping mutations that are present in at least one lineage — filter_lineages","title":"Filter lineage_defs for specific lineages, keeping mutations that are present in at least one lineage — filter_lineages","text":"Filter lineage_defs specific lineages, keeping mutations present least one lineage","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/filter_lineages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter lineage_defs for specific lineages, keeping mutations that are present in at least one lineage — filter_lineages","text":"","code":"filter_lineages(   lineage_defs = NULL,   lineages = c(\"B.1.526\", \"B.1.1.7\", \"B.1.351\", \"B.1.617.2\", \"B.1.427\", \"B.1.429\", \"P.1\"),   return_df = FALSE,   path = NULL,   shared_order = TRUE )"},{"path":"https://dasl-lab.github.io/provoc/reference/filter_lineages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter lineage_defs for specific lineages, keeping mutations that are present in at least one lineage — filter_lineages","text":"lineage_defs result astronomize(). NULL, tries run astronoimize. lineages Vector lineage names (must rownmaes(lineage_defs)). Defaults lineages circulating 2021-2022. return_df function return data frame? Note returned df transposed compared lineage_defs. Default FALSE. path Passed astronomize lineage_defs NULL. shared_order Put shared mutations first? Default TRUE.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/filter_lineages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter lineage_defs for specific lineages, keeping mutations that are present in at least one lineage — filter_lineages","text":"lineage definition matrix fewer rows columns lineage_defs. return_df, columns represent lineage names mutations column added.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/filter_lineages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter lineage_defs for specific lineages, keeping mutations that are present in at least one lineage — filter_lineages","text":"removing lineage, remaining mutations might present remaining lineage. function remove mutations longer belong lineage. shared_order = TRUE result mutations present highest number lineages appear first. convenient human inspection, affect estimation.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/filter_lineages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter lineage_defs for specific lineages, keeping mutations that are present in at least one lineage — filter_lineages","text":"","code":"# After cloning the constellations repo lineage_defs <- astronomize(path = \"../constellations\") #> Warning: Path does not exist. Using built-in definitions. dim(lineage_defs) #> [1]  37 325 lineage_defs <- filter_lineages(lineage_defs, c(\"B.1.1.7\", \"B.1.617.2\")) dim(lineage_defs) # rows and columns have changed #> [1]  2 36"},{"path":"https://dasl-lab.github.io/provoc/reference/find_mutation_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the right mutation column in lineage_defs. — find_mutation_column","title":"Finds the right mutation column in lineage_defs. — find_mutation_column","text":"Checks columns lineage_defs found columns check rows transpose lineage_defs.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/find_mutation_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the right mutation column in lineage_defs. — find_mutation_column","text":"","code":"find_mutation_column(data, lineage_defs)"},{"path":"https://dasl-lab.github.io/provoc/reference/find_mutation_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the right mutation column in lineage_defs. — find_mutation_column","text":"data Data frame containing count, coverage, lineage columns lineage_defs Optional mutation definitions","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/find_mutation_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the right mutation column in lineage_defs. — find_mutation_column","text":"list length 2 containing possibly transposed lineage_defs right mutation column.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fission.html","id":null,"dir":"Reference","previous_headings":"","what":"Un-fuse coco and lineage_defs. — fission","title":"Un-fuse coco and lineage_defs. — fission","text":"Fusion ensures mutation lists match correct order, two separated analysis.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fission.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Un-fuse coco and lineage_defs. — fission","text":"","code":"fission(fused, sample = NULL)"},{"path":"https://dasl-lab.github.io/provoc/reference/fission.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Un-fuse coco and lineage_defs. — fission","text":"fused result fuse(coco, lineage_defs) sample name sample used.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fission.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Un-fuse coco and lineage_defs. — fission","text":"list containing coco lineage_defs.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fission.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Un-fuse coco and lineage_defs. — fission","text":"function mainly used internally, can useful check mutations actually used model fitting.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fuse.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure mutations are present in the data and lineage_defs — fuse","title":"Ensure mutations are present in the data and lineage_defs — fuse","text":"Finds intersection mutations present coco lineage_defs. squash lineages together resulting mutation list similar (see details).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fuse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure mutations are present in the data and lineage_defs — fuse","text":"","code":"fuse(coco, lineage_defs, min_perc = 0.01, verbose = FALSE)"},{"path":"https://dasl-lab.github.io/provoc/reference/fuse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure mutations are present in the data and lineage_defs — fuse","text":"coco data frame column labelled mutation. lineage_defs Rownames lineages, column names Mutations. min_perc lineage must least min_perc mutations. vebose Print information mutations removed fusion. 0 (FALSE) returns errors, 1 (TRUE) returns warnings info relative mutation counts, 2 returns mutations .","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fuse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure mutations are present in the data and lineage_defs — fuse","text":"data frame columns coco (possibly fewer rows) columns plus new columns lineages. provoc function expects structure.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fuse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure mutations are present in the data and lineage_defs — fuse","text":"First, intersection mutations found. columns lineage_defs subsetted according intersection. removes mutations lineage, lineage removed study (warning given lineage pre-specified voc). removing mutations, possible rows lose distinctive mutations become identical. case names lineages pasted together one rows kept. Duplicate mutation names coco removed. safe use function data frame contains multiple samples.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/fuse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure mutations are present in the data and lineage_defs — fuse","text":"","code":"data(Baaijens) b1 <- Baaijens[Baaijens$sra == Baaijens$sra[1], ] b1$mutation <- parse_mutations(b1$label) lineage_defs <- astronomize() |>     filter_variants(c(\"B.1.1.7\", \"B.1.429\", \"B.1.617.2\")) #> Error in filter_variants(astronomize(), c(\"B.1.1.7\", \"B.1.429\", \"B.1.617.2\")): could not find function \"filter_variants\" fused <- fuse(b1, lineage_defs) #> Error in rownames(lineage_defs): object 'lineage_defs' not found head(fused) #> Error in head(fused): object 'fused' not found"},{"path":"https://dasl-lab.github.io/provoc/reference/get_actual_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the actual lineage defitions used when fitting the models. — get_actual_defs","title":"Extract the actual lineage defitions used when fitting the models. — get_actual_defs","text":"Extract actual lineage defitions used fitting models.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_actual_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the actual lineage defitions used when fitting the models. — get_actual_defs","text":"","code":"get_actual_defs(provoc_obj, which = NULL)"},{"path":"https://dasl-lab.github.io/provoc/reference/get_actual_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the actual lineage defitions used when fitting the models. — get_actual_defs","text":"provoc_obj Object class provoc used extract mutation definitions. lineage definition extract. NULL, extracts . one lineage definition matrix, return matrix. Otherwise returns list matrices.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_convergence.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if provoc converged — get_convergence","title":"Check if provoc converged — get_convergence","text":"converged, returns True prints message. Otherwise, prints samples note giving hints converge.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_convergence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if provoc converged — get_convergence","text":"","code":"get_convergence(res, verbose = TRUE)"},{"path":"https://dasl-lab.github.io/provoc/reference/get_convergence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if provoc converged — get_convergence","text":"res result object provoc verbose Print message screen?","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_convergence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if provoc converged — get_convergence","text":"Invisbly returns TRUE samples converged, false otherwise.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_lineage_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the lineage definitions used as input for the model — get_lineage_defs","title":"Extract the lineage definitions used as input for the model — get_lineage_defs","text":"Extract lineage definitions used input model","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_lineage_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the lineage definitions used as input for the model — get_lineage_defs","text":"","code":"get_lineage_defs(provoc_obj)"},{"path":"https://dasl-lab.github.io/provoc/reference/get_lineage_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the lineage definitions used as input for the model — get_lineage_defs","text":"provoc_obj Object class provoc used extract mutation definitions.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_lineage_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather information about lineages — get_lineage_info","title":"Gather information about lineages — get_lineage_info","text":"Downloads parses table https://cov-lineages.com/lineages.org using rvest package.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_lineage_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather information about lineages — get_lineage_info","text":"","code":"get_lineage_info(path = \"data\")"},{"path":"https://dasl-lab.github.io/provoc/reference/get_lineage_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather information about lineages — get_lineage_info","text":"path Path save (load) lineage information. Default data/.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_lineage_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather information about lineages — get_lineage_info","text":"data frame, side effect creating file path/lineage-list.csv exist.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract just the results of lineage estimation — get_res","title":"Extract just the results of lineage estimation — get_res","text":"Extract just results lineage estimation","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/get_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract just the results of lineage estimation — get_res","text":"","code":"get_res(provoc_obj)"},{"path":"https://dasl-lab.github.io/provoc/reference/get_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract just the results of lineage estimation — get_res","text":"provoc_obj Object class provoc used extract results.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/is_almost_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds if one lineage is almost a subset of another — is_almost_subset","title":"Finds if one lineage is almost a subset of another — is_almost_subset","text":"Finds one lineage almost subset another","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/is_almost_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds if one lineage is almost a subset of another — is_almost_subset","text":"","code":"is_almost_subset(v1, v2)"},{"path":"https://dasl-lab.github.io/provoc/reference/is_almost_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds if one lineage is almost a subset of another — is_almost_subset","text":"v1 vector comparison v2 vector comparison","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/is_almost_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds if one lineage is almost a subset of another — is_almost_subset","text":"Result, TRUE v2 almost subset v1","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/is_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds if one lineage is a subset of another — is_subset","title":"Finds if one lineage is a subset of another — is_subset","text":"Finds one lineage subset another","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/is_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds if one lineage is a subset of another — is_subset","text":"","code":"is_subset(v1, v2)"},{"path":"https://dasl-lab.github.io/provoc/reference/is_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds if one lineage is a subset of another — is_subset","text":"v1 vector comparison v2 vector comparison","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/is_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds if one lineage is a subset of another — is_subset","text":"Result, TRUE v2 subset v1","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/jaccard_simularity.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds the Jaccard similarity between two vectors — jaccard_simularity","title":"Finds the Jaccard similarity between two vectors — jaccard_simularity","text":"Finds Jaccard similarity two vectors","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/jaccard_simularity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds the Jaccard similarity between two vectors — jaccard_simularity","text":"","code":"jaccard_simularity(v1, v2)"},{"path":"https://dasl-lab.github.io/provoc/reference/jaccard_simularity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds the Jaccard similarity between two vectors — jaccard_simularity","text":"v1 vector comparison v2 vector comparison","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/jaccard_simularity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds the Jaccard similarity between two vectors — jaccard_simularity","text":"Jaccard simularity","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/left_both_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the set differences for two character vectors — left_both_right","title":"Calculate the set differences for two character vectors — left_both_right","text":"Calculate set differences two character vectors","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/left_both_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the set differences for two character vectors — left_both_right","text":"","code":"left_both_right(left, right)"},{"path":"https://dasl-lab.github.io/provoc/reference/left_both_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the set differences for two character vectors — left_both_right","text":"left, right Two character vectors","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_defs_from_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a lineage definition matrix from a list of lineages with their mutations — lineage_defs_from_list","title":"Create a lineage definition matrix from a list of lineages with their mutations — lineage_defs_from_list","text":"input named list names represent lineages values vectors mutations. output valid lineage matrix.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_defs_from_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a lineage definition matrix from a list of lineages with their mutations — lineage_defs_from_list","text":"","code":"lineage_defs_from_list(lineage_list)"},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_defs_from_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a lineage definition matrix from a list of lineages with their mutations — lineage_defs_from_list","text":"lineage_list named list vectors mutations. Mutation names format data, otherwise post-processing required.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_defs_from_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a lineage definition matrix from a list of lineages with their mutations — lineage_defs_from_list","text":"lineage matrix (rownames lineages, colnames mutations, entry ,j 1 lineage contains mutation j, 0 otherwise).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_facts.html","id":null,"dir":"Reference","previous_headings":"","what":"Facts about the lineages — lineage_facts","title":"Facts about the lineages — lineage_facts","text":"Especially useful checking earliest/latest sequence date","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_facts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facts about the lineages — lineage_facts","text":"","code":"lineage_facts"},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_facts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Facts about the lineages — lineage_facts","text":"data frame","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_facts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Facts about the lineages — lineage_facts","text":"https://nextstrain.org","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Finds and prints all similarities among lineage — lineage_similarity","title":"Finds and prints all similarities among lineage — lineage_similarity","text":"Finds prints similarities among lineage","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finds and prints all similarities among lineage — lineage_similarity","text":"","code":"lineage_similarity(data, simplify = FALSE, almost = 1)"},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finds and prints all similarities among lineage — lineage_similarity","text":"data result fuse lineage definition matrix.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/lineage_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finds and prints all similarities among lineage — lineage_similarity","text":"list length 4 containing information lineages differ one, Jaccard similarity lineages, lineages subsets almost subsets . is_subset is_almost_subset value true lineages column name subset/almost subset lineages row name.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_ivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Mutations from the ivar pipeline — parse_ivar","title":"Parse Mutations from the ivar pipeline — parse_ivar","text":"Parse Mutations ivar pipeline","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_ivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Mutations from the ivar pipeline — parse_ivar","text":"","code":"parse_ivar(ivar_output)"},{"path":"https://dasl-lab.github.io/provoc/reference/parse_ivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Mutations from the ivar pipeline — parse_ivar","text":"ivar_output data frame imported ivar output. Must columns POS ALT","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_mutation.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse mutations from (type, pos, alt) to amino acid — parse_mutation","title":"Parse mutations from (type, pos, alt) to amino acid — parse_mutation","text":"many things repo, lovingly stolen seq_utils.py script https://github.com/PoonLab/gromstole (well PoonLab/covizu).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_mutation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse mutations from (type, pos, alt) to amino acid — parse_mutation","text":"","code":"parse_mutation(   type,   pos,   alt,   reffile = system.file(\"extdata/NC_045512.fa\", package = \"provoc\") )"},{"path":"https://dasl-lab.github.io/provoc/reference/parse_mutation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse mutations from (type, pos, alt) to amino acid — parse_mutation","text":"type Either \"~\", \"+\", \"-\" mutation, insertion, deletion, respectively. pos one-indexed position relative reference. alt alternate nucleotide, nucleotides, number deletions, respectively. reffile path reference file used define mutations. Usually NC_045512.fa except particular circumstances.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_mutation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse mutations from (type, pos, alt) to amino acid — parse_mutation","text":"e.g. aa:orf1a:K856R","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse output of the Gromstole pipeline, from SNVs to AAs — parse_mutations","title":"Parse output of the Gromstole pipeline, from SNVs to AAs — parse_mutations","text":"function can slow.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse output of the Gromstole pipeline, from SNVs to AAs — parse_mutations","text":"","code":"parse_mutations(labels)"},{"path":"https://dasl-lab.github.io/provoc/reference/parse_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse output of the Gromstole pipeline, from SNVs to AAs — parse_mutations","text":"labels labels column GromStole output.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_mutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse output of the Gromstole pipeline, from SNVs to AAs — parse_mutations","text":"vector length labels.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_one_ivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse mutations from ivar pipeline — parse_one_ivar","title":"Parse mutations from ivar pipeline — parse_one_ivar","text":"Parse mutations ivar pipeline","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_one_ivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse mutations from ivar pipeline — parse_one_ivar","text":"","code":"parse_one_ivar(pos, alt)"},{"path":"https://dasl-lab.github.io/provoc/reference/parse_one_ivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse mutations from ivar pipeline — parse_one_ivar","text":"pos position genome alt alternate genotype","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_unique_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse all unique mutations in a vector — parse_unique_mutations","title":"Parse all unique mutations in a vector — parse_unique_mutations","text":"Parse unique mutations vector","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_unique_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse all unique mutations in a vector — parse_unique_mutations","text":"","code":"parse_unique_mutations(muts)"},{"path":"https://dasl-lab.github.io/provoc/reference/parse_unique_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse all unique mutations in a vector — parse_unique_mutations","text":"muts vector mutations format \"~50535C\", \"-43234.2\", \"+342234.AC\".","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/parse_unique_mutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse all unique mutations in a vector — parse_unique_mutations","text":"data frame columns label mutation.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot.provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of model fitting — plot.provoc","title":"Plot the results of model fitting — plot.provoc","text":"Plot results model fitting","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot.provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of model fitting — plot.provoc","text":"","code":"# S3 method for provoc plot(provoc_obj, plot_type = c(\"barplot\"))"},{"path":"https://dasl-lab.github.io/provoc/reference/plot.provoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of model fitting — plot.provoc","text":"provoc_obj Resulting object class provoc used plotting. plot_type Currently \"barplot\" implemented. Residual plots diagnostics works progress.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_actual_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize how lineage definitions were used in analysis — plot_actual_defs","title":"Visualize how lineage definitions were used in analysis — plot_actual_defs","text":"Visualize lineage definitions used analysis","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_actual_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize how lineage definitions were used in analysis — plot_actual_defs","text":"","code":"plot_actual_defs(   provoc_obj,   type = \"coverage\",   fun = mean,   ...,   main = NULL,   col = hcl.colors(n = 21, palette = \"Dark Mint\", rev = TRUE) )"},{"path":"https://dasl-lab.github.io/provoc/reference/plot_actual_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize how lineage definitions were used in analysis — plot_actual_defs","text":"provoc_obj result calling provoc. type \"used\" total number times mutation used analysis \"coverage\" information coverage. Default \"coverage\". fun function used summarise coverage (type = \"coverage\"). Default mean. ... arguments passed fun main main title plot. col Colours used plotting. Default hcl.colors(n = 21, palette = \"Dark Mint\", rev = TRUE). Single-hue sequential colour palettes recommended.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_actual_defs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize how lineage definitions were used in analysis — plot_actual_defs","text":"","code":"data(Baaijens) b2 <- Baaijens [Baaijens$sra %in% unique(Baaijens$sra)[1:30], ] b2$mutations <- parse_mutations(b2$label)  lineage_defs <- astronomize() |>     filter_lineages(c(\"B.1.617.1\", \"B.1.617.2\", \"B.1.617.2+K417N\",         \"B.1.427\", \"B.1.429\", \"B.1.1.7\")) res <- provoc(     formula = count / coverage ~ .,     lineage_defs = lineage_defs,     data = b2,      by = \"sra\",     bootstrap_samples = 0) #> Warning: first element used of 'length.out' argument #> Warning: one-dimensional optimization by Nelder-Mead is unreliable: #> use \"Brent\" or optimize() directly #> Warning: one-dimensional optimization by Nelder-Mead is unreliable: #> use \"Brent\" or optimize() directly plot_actual_defs(res, type = \"coverage\", fun = max, na.rm = TRUE)"},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a lineage definition matrix — plot_lineage_defs","title":"Plot a lineage definition matrix — plot_lineage_defs","text":"Plot lineage definition matrix","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a lineage definition matrix — plot_lineage_defs","text":"","code":"plot_lineage_defs(   lineage_defs,   col = colorRampPalette(colors = c(\"white\", \"dodgerblue4\")),   main = NULL )"},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a lineage definition matrix — plot_lineage_defs","text":"lineage_defs Lineage definition matrix, produced astronomize() usher_barcodes().Alternatively output provoc(), lineage definition matrix extracted. col function takes argument n returns vector colours length n, colorRampPallette(c(\"white\", \"dodgerblue4\")) main main title plot.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a lineage definition matrix — plot_lineage_defs","text":"Every second column display slight grey background make easier read mutation lineage. final column summarises number mutations unique given variant, darker colour representing variant unique mutations. number brackets gives exact number unique mutations.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a lineage definition matrix — plot_lineage_defs","text":"","code":"# Choose lineages that I know have a lot of shared mutations lineage_defs <- astronomize() |>     filter_lineages(c(\"B.1.1.7\", \"B.1.617.1\", \"B.1.617.2\",         \"B.1.617.2+K417N\", \"B.1.617.3\", \"XBB.1\")) # XBB.1 has 1 shared mutation and 2 unique mutations # None of B.1.1.7's mutations are shared plot_lineage_defs(lineage_defs)"},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs2.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two lineage definition matrices — plot_lineage_defs2","title":"Compare two lineage definition matrices — plot_lineage_defs2","text":"Compare two lineage definition matrices","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two lineage definition matrices — plot_lineage_defs2","text":"","code":"plot_lineage_defs2(   left_def,   right_def,   col = c(\"#b2182b\", \"#f7f7f7\", \"#2166ac\", \"grey90\", \"white\", \"grey40\"),   ... )"},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two lineage definition matrices — plot_lineage_defs2","text":"left_def, right_def Lineage definition matrices, produced astronomize() usher_barcodes().Alternatively output provoc(), lineage definition matrix extracted (one may lineage definition matrix may result fitting provoc, allowing comparison lineages/mutations actually used). col vector three colours (left, middle, right). mutation present left_def , colour first colour vector, mutation present 80% way left colour middle colour (similar right_def). Optionally, user can specify vector length 6, colours define left, middle, right, NA, neither, . ... Arguments passed heatmap(), main title mar give title space.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare two lineage definition matrices — plot_lineage_defs2","text":"darker colour means mutation present lineage, whereas lighter colour means absent. first colour col represents mutation/lineage combinations present left definitions, third color col means right. center square represents mutations lineages present lineage definitions, white indicating mutation present particular lineage black indicating present.","code":""},{"path":[]},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineage_defs2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare two lineage definition matrices — plot_lineage_defs2","text":"","code":"lineages <- c(\"B.1.1.7\", \"P.1\", \"B.1.617.1\", \"B.1.617.2\", \"B.1.617.3\") left_def <- astronomize() |> filter_lineages(lineages[-1]) right_def <- usher_barcodes() |> filter_lineages(lineages[-2]) #> Error in usher_barcodes(): could not find function \"usher_barcodes\" plot_lineage_defs2(left_def, right_def,     main = \"Constellations (without B.1.1.7) vs. Usher Barcodes (without P.1)\") #> Error in plot_lineage_defs2(left_def, right_def, main = \"Constellations (without B.1.1.7) vs. Usher Barcodes (without P.1)\"): object 'right_def' not found  plot_lineage_defs2(left_def, right_def,     main = \"Constellations (without B.1.1.7) vs. Usher Barcodes (without P.1)\",     col = c(2, 0, 3)) #> Error in plot_lineage_defs2(left_def, right_def, main = \"Constellations (without B.1.1.7) vs. Usher Barcodes (without P.1)\",     col = c(2, 0, 3)): object 'right_def' not found  # See which mutations/lineages were actually used lineage_defs <- astronomize() |>     filter_lineages(c(\"B.1.617.1\", \"B.1.617.2\", \"B.1.617.2+K417N\",     \"B.1.427\", \"B.1.429\", \"B.1.1.7\")) res <- provoc(count / coverage ~ ., data = b1,     lineage_defs = lineage_defs) #> Error in provoc(count/coverage ~ ., data = b1, lineage_defs = lineage_defs): object 'b1' not found # B.1.617.2 and B.1.617.2+K417N were \"squashed\" because they're identical. # We can also see which mutations were *not* used in the analysis. # They are the ones defined in the left_def but not present in right_def. plot_lineage_defs2(lineage_defs, res) #> Error in plot_lineage_defs2(lineage_defs, res): object 'res' not found"},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineages.html","id":null,"dir":"Reference","previous_headings":"","what":"plot the similarities of lineage — plot_lineages","title":"plot the similarities of lineage — plot_lineages","text":"plot similarities lineage","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_lineages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot the similarities of lineage — plot_lineages","text":"","code":"plot_lineages(provoc_obj, type = \"Jaccard_similarity\", labels = TRUE)"},{"path":"https://dasl-lab.github.io/provoc/reference/plot_resids.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residuals, by lineage — plot_resids","title":"Plot the residuals, by lineage — plot_resids","text":"Plot residuals, lineage","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/plot_resids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the residuals, by lineage — plot_resids","text":"","code":"plot_resids(provoc_obj, type = \"deviance\", by_lineage = TRUE)"},{"path":"https://dasl-lab.github.io/provoc/reference/plot_resids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residuals, by lineage — plot_resids","text":"provoc_obj Result fitting provoc(). type Deviance raw residuals.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/pos_from_aa.html","id":null,"dir":"Reference","previous_headings":"","what":"Find position from amino acid string. — pos_from_aa","title":"Find position from amino acid string. — pos_from_aa","text":"Find position amino acid string.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/pos_from_aa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find position from amino acid string. — pos_from_aa","text":"","code":"pos_from_aa(aa)"},{"path":"https://dasl-lab.github.io/provoc/reference/pos_from_aa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find position from amino acid string. — pos_from_aa","text":"aa vector mutations. aa:orf1a:I300V, ins:28215:3, del:27378:25, C703T","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/pos_from_aa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find position from amino acid string. — pos_from_aa","text":"Finds 0-indexed position amino acid. Intended aid adding coverage mutations observed.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/pos_from_aa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find position from amino acid string. — pos_from_aa","text":"","code":"pos_from_aa(\"aa:orf1a:I300V\") #1166 #> [1] 1166 pos_from_aa(\"C703T\") # 703 #> [1] 703"},{"path":"https://dasl-lab.github.io/provoc/reference/predict.provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict using Proportions of Lineages — predict.provoc","title":"Predict using Proportions of Lineages — predict.provoc","text":"Takes named list estimate proportions associated lineage matrix, performs matrix multiplication predict outcomes, returns results order original data.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/predict.provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict using Proportions of Lineages — predict.provoc","text":"","code":"# S3 method for provoc predict(   provoc_obj,   newdata = NULL,   type = NULL,   dispersion = NULL,   terms = NULL )"},{"path":"https://dasl-lab.github.io/provoc/reference/predict.provoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict using Proportions of Lineages — predict.provoc","text":"provoc_obj Output provoc newdata yet implemented. type yet implemented. dispersion yet implemented. terms yet implemented.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/predict.provoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict using Proportions of Lineages — predict.provoc","text":"Predicted values order input data.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/predict.provoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict using Proportions of Lineages — predict.provoc","text":"","code":"predicted_results <- predict(provoc_obj) #> Error in predict(provoc_obj): object 'provoc_obj' not found"},{"path":"https://dasl-lab.github.io/provoc/reference/prepare_and_fuse_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare and Fuse Data — prepare_and_fuse_data","title":"Prepare and Fuse Data — prepare_and_fuse_data","text":"Prepares data based grouping variable applies fuse function.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/prepare_and_fuse_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare and Fuse Data — prepare_and_fuse_data","text":"","code":"prepare_and_fuse_data(data, lineage_defs, by, verbose)"},{"path":"https://dasl-lab.github.io/provoc/reference/prepare_and_fuse_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare and Fuse Data — prepare_and_fuse_data","text":"data data frame containing variables model. lineage_defs matrix mutation definitions. optional string specifying column name group data . verbose","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/prepare_and_fuse_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare and Fuse Data — prepare_and_fuse_data","text":"list containing fused data frame grouped data list (applicable).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/prepare_and_fuse_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare and Fuse Data — prepare_and_fuse_data","text":"","code":"# This function is internally used and not typically called by the user."},{"path":"https://dasl-lab.github.io/provoc/reference/print.provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the results of lineage abundance estimation — print.provoc","title":"Print the results of lineage abundance estimation — print.provoc","text":"Print results lineage abundance estimation","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/print.provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the results of lineage abundance estimation — print.provoc","text":"","code":"# S3 method for provoc print(provoc_obj, n = 6)"},{"path":"https://dasl-lab.github.io/provoc/reference/print.provoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the results of lineage abundance estimation — print.provoc","text":"provoc_obj resulting object class provoc used printing. n number rows results dataframe print","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/print.summary.provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary of a provoc object — print.summary.provoc","title":"Print the summary of a provoc object — print.summary.provoc","text":"Print summary provoc object","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/print.summary.provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary of a provoc object — print.summary.provoc","text":"","code":"# S3 method for summary.provoc print(summary_provoc)"},{"path":"https://dasl-lab.github.io/provoc/reference/process_lineage_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Mutation Definitions — process_lineage_defs","title":"Process Mutation Definitions — process_lineage_defs","text":"Handles mutation definitions using provided matrix generating using astronomize().","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/process_lineage_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Mutation Definitions — process_lineage_defs","text":"","code":"process_lineage_defs(lineage_defs)"},{"path":"https://dasl-lab.github.io/provoc/reference/process_lineage_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Mutation Definitions — process_lineage_defs","text":"lineage_defs matrix mutation definitions NULL use default generated astronomize().","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/process_lineage_defs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Mutation Definitions — process_lineage_defs","text":"matrix mutation definitions ready analysis.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/process_lineage_defs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Mutation Definitions — process_lineage_defs","text":"","code":"# This function is internally used and not typically called by the user."},{"path":"https://dasl-lab.github.io/provoc/reference/process_optim.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Optimization — process_optim","title":"Process Optimization — process_optim","text":"Processes group entire dataset provoc_optim collects results.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/process_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Optimization — process_optim","text":"","code":"process_optim(grouped_data, lineage_defs, by, bootstrap_samples, verbose)"},{"path":"https://dasl-lab.github.io/provoc/reference/process_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Optimization — process_optim","text":"grouped_data list containing data frames group processed. lineage_defs matrix mutation definitions. optional string specifying column name group data . bootstrap_samples number bootstrap samples use. verbose TRUE print detailed messages.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/process_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Optimization — process_optim","text":"list results group, including point estimates convergence information.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/process_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Optimization — process_optim","text":"","code":"# This function is internally used and not typically called by the user."},{"path":"https://dasl-lab.github.io/provoc/reference/provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportions of Variants of Concern (provoc) Analysis — provoc","title":"Proportions of Variants of Concern (provoc) Analysis — provoc","text":"Applies provoc_optim analyze COVID-19 lineage proportions. allows flexible lineage mutation definitions.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportions of Variants of Concern (provoc) Analysis — provoc","text":"","code":"provoc(   formula,   data,   lineage_defs = NULL,   by = NULL,   bootstrap_samples = 0,   update_interval = 20,   verbose = FALSE,   annihilate = FALSE )"},{"path":"https://dasl-lab.github.io/provoc/reference/provoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportions of Variants of Concern (provoc) Analysis — provoc","text":"formula formula binomial model, like cbind(count, coverage) ~ . data Data frame containing count, coverage, lineage columns. lineage_defs Optional lineage definitions; NULL, uses astronomize(). Column name group process data. included, results contain column labelled \"group\". bootstrap_samples number bootstrap samples use. update_interval Interval progress messages (0 suppress). verbose TRUE print detailed messages. annihilate TRUE remove duplicate lineages data","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/provoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportions of Variants of Concern (provoc) Analysis — provoc","text":"Returns object class 'provoc' results applying provoc_optim input data. object methods print(), plot(), summary(), otherwise treated dataframe. Fit information can extracted follows: convergence(res) get_lineage_defs(res): Mutation definitions used analysis, provided lineage_defs default astronomize(). Outputs necessary information subsequent analysis, including use predict.provoc().","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/provoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportions of Variants of Concern (provoc) Analysis — provoc","text":"","code":"library(provoc) # Load a dataset data(\"Baaijens\") b1 <- Baaijens[Baaijens$sra == Baaijens$sra[1], ] # Prepare the dataset b1$mutation <- parse_mutations(b1$label)  # Analyze the dataset using the default mutation definitions res <- provoc(formula = count / coverage ~ B.1.1.7 + B.1.617.2,      data = b1, by = \"sra\") res #> Call: count/coverage ~ B.1.1.7 + B.1.617.2 #> <environment: 0x7fb6d7dcc098> #>  #> Mutations in lineage definitions:  325  #> Mutations used in analysis/mutations in data: #> 74/772 #>  #> All models converged. #>  #> Top 2 lineages: #>      rho ci_low ci_high   lineage         sra avg_spot_len sample_name #> 1  0.008     NA      NA   B.1.1.7 SRR15505102          302         DU1 #> 2 <0.001     NA      NA B.1.617.2 SRR15505102          302         DU1 #>       bases  bioproject       date #> 1 585534814 PRJNA741211 2021-01-19 #> 2 585534814 PRJNA741211 2021-01-19 as.data.frame(res) |> head() #>            rho ci_low ci_high   lineage         sra avg_spot_len sample_name #> 1 0.0075982608     NA      NA   B.1.1.7 SRR15505102          302         DU1 #> 2 0.0003679198     NA      NA B.1.617.2 SRR15505102          302         DU1 #>       bases  bioproject       date #> 1 585534814 PRJNA741211 2021-01-19 #> 2 585534814 PRJNA741211 2021-01-19 summary(res) #>  #> Call: #> count/coverage ~ B.1.1.7 + B.1.617.2 #> <environment: 0x7fb6d7dcc098> #>  #> Deviance Residuals: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #> -10.305  -2.000   0.000  -1.207   0.000   4.557  #>  #> Mutations in lineage definitions: 325  #> Mutations used in analysis/mutations in data: #> 74/772 #>  #> Coefficients: #>            rho ci_low ci_high   lineage         sra #> 1 0.0075982608     NA      NA   B.1.1.7 SRR15505102 #> 2 0.0003679198     NA      NA B.1.617.2 SRR15505102 #>  #> Correlation of coefficients: #> Error in bootstraps[[1]]: subscript out of bounds plot(res)  predicted_values <- predict(res)"},{"path":[]},{"path":"https://dasl-lab.github.io/provoc/reference/provoc_optim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the proportions of VOCs using Constrained Optimization — provoc_optim","text":"","code":"provoc_optim(   coco,   lineage_defs,   bootstrap_samples = 0,   verbose = TRUE,   rho_init = NULL )"},{"path":"https://dasl-lab.github.io/provoc/reference/provoc_optim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the proportions of VOCs using Constrained Optimization — provoc_optim","text":"coco data frame containing columns labelled count, coverage, mutation. lineage_defs lineage matrix used study. rownames must VoCs colnames must mutation names (format mutation names coco) bootstrap_samples number bootstrap samples use. verbose Print messages console, default True.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/provoc_optim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the proportions of VOCs using Constrained Optimization — provoc_optim","text":"list containing results well convergence information constrOptim. res_df estimated proportions lineage (\\(rho\\)), including CI bootstrap_samples > 0 convergence Logical convergence_note Convergence code constrOptim. Also includes method used initializing \\(\\rho\\).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/provoc_optim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the proportions of VOCs using Constrained Optimization — provoc_optim","text":"estimates found minimizing squared difference frequency mutation prediction binomial model proportion equal sum rho times relevant column lineage_defs size parameter equal coverage. algorithm first try prior guess based current (March 2022) common VOCs, try uniform proportion, (nuclear option) try 20 random perturbations works. Fails gracefully, list elements indicating convergence status initialization rho, returns results lowest value objective function. Bootstrapping performed parametrically, assuming coverage Poisson mean observed coverage , based sampled value coverage, count sampled binomial distribution proportion equal data.","code":""},{"path":[]},{"path":"https://dasl-lab.github.io/provoc/reference/provoc_optim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the proportions of VOCs using Constrained Optimization — provoc_optim","text":"","code":"lineage_defs <- simulate_lineage_defs() # default values (Omicron) lineage_defs <- lineage_defs[row.names(lineage_defs) %in% c(\"B.1.1.529\", \"BA.1\", \"BA.2\")] coco <- simulate_coco(lineage_defs, rel_counts = c(100, 200, 300)) # expect 1/6, 2/6, and 3/6 #> Error in if (length(rel_counts) != nrow(lineage_defs)) {    stop(\"Counts must correspond to rows in lineage_defs.\")}: argument is of length zero res <- copt_binom(coco, lineage_defs) #> Error in copt_binom(coco, lineage_defs): could not find function \"copt_binom\" res$res_df #> Error in eval(expr, envir, enclos): object 'res' not found"},{"path":"https://dasl-lab.github.io/provoc/reference/re_findall.html","id":null,"dir":"Reference","previous_headings":"","what":"re_findall — re_findall","title":"re_findall — re_findall","text":"Emulate behaviour Python's re.findall() function. Lovingly stolen https://github.com/PoonLab/gromstole.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/re_findall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"re_findall — re_findall","text":"","code":"re_findall(pat, s)"},{"path":"https://dasl-lab.github.io/provoc/reference/re_findall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"re_findall — re_findall","text":"pat: regex pattern s: character, single string","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/re_findall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"re_findall — re_findall","text":"character, vector matching substrings","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/remove_identical_lineages.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Identical Lineages — remove_identical_lineages","title":"Remove Identical Lineages — remove_identical_lineages","text":"ensure predictor matrix singular, annihilate TRUE function returns mutations unique combination lineages. FALSE warns user duplicate lineages","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/remove_identical_lineages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Identical Lineages — remove_identical_lineages","text":"","code":"remove_identical_lineages(fused_df, annihilate)"},{"path":"https://dasl-lab.github.io/provoc/reference/remove_identical_lineages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Identical Lineages — remove_identical_lineages","text":"fused_df fused data frame fuse() function annihilate TRUE remove duplicate lineages, FALSE warn user duplicate lineages","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/remove_identical_lineages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Identical Lineages — remove_identical_lineages","text":"data frame mutations duplicate combination lineages","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/remove_identical_lineages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Identical Lineages — remove_identical_lineages","text":"","code":"# This function is internally used and not typically called by the user."},{"path":"https://dasl-lab.github.io/provoc/reference/resid.provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the residuals of a provoc object — resid.provoc","title":"Calculate the residuals of a provoc object — resid.provoc","text":"Calculate residuals provoc object","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/resid.provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the residuals of a provoc object — resid.provoc","text":"","code":"# S3 method for provoc resid(provoc_obj, type = \"deviance\")"},{"path":"https://dasl-lab.github.io/provoc/reference/resid.provoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the residuals of a provoc object — resid.provoc","text":"provoc_obj result provoc() type \"deviance\" \"raw\"","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/residuals.provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the residuals of a provoc object — residuals.provoc","title":"Calculate the residuals of a provoc object — residuals.provoc","text":"Calculate residuals provoc object","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/residuals.provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the residuals of a provoc object — residuals.provoc","text":"","code":"# S3 method for provoc residuals(provoc_obj, type = \"deviance\")"},{"path":"https://dasl-lab.github.io/provoc/reference/residuals.provoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the residuals of a provoc object — residuals.provoc","text":"provoc_obj result provoc() type \"deviance\" \"raw\"","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/rho_initializer.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a vector of proportions for the lineages of concern, prioritizing current (March 2022) most probable VoCs. — rho_initializer","title":"Initialize a vector of proportions for the lineages of concern, prioritizing current (March 2022) most probable VoCs. — rho_initializer","text":"Initialize vector proportions lineages concern, prioritizing current (March 2022) probable VoCs.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/rho_initializer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a vector of proportions for the lineages of concern, prioritizing current (March 2022) most probable VoCs. — rho_initializer","text":"","code":"rho_initializer(lineage_defs)"},{"path":"https://dasl-lab.github.io/provoc/reference/rho_initializer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a vector of proportions for the lineages of concern, prioritizing current (March 2022) most probable VoCs. — rho_initializer","text":"lineage_defs lineage matrix used study; used rownames (VOCs expected format)","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/rho_initializer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a vector of proportions for the lineages of concern, prioritizing current (March 2022) most probable VoCs. — rho_initializer","text":"lineage_defs vector length number rows lineage_defs, values sum less one value 0 1","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simplify_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplifies lineage similarity matrices for easier interpretation — simplify_similarity","title":"Simplifies lineage similarity matrices for easier interpretation — simplify_similarity","text":"Simplifies lineage similarity matrices easier interpretation","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simplify_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplifies lineage similarity matrices for easier interpretation — simplify_similarity","text":"","code":"simplify_similarity(similarities, almost)"},{"path":"https://dasl-lab.github.io/provoc/reference/simplify_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplifies lineage similarity matrices for easier interpretation — simplify_similarity","text":"similarities Result lineage_similarity() almost Degree similarity.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_coco.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate counts and coverage from a lineage definition matrix — simulate_coco","title":"Simulate counts and coverage from a lineage definition matrix — simulate_coco","text":"Simulate counts coverage lineage definition matrix","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_coco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate counts and coverage from a lineage definition matrix — simulate_coco","text":"","code":"simulate_coco(   lineage_defs,   rel_counts = NULL,   censoring = NULL,   absurd = FALSE,   verbose = TRUE )"},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_coco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate counts and coverage from a lineage definition matrix — simulate_coco","text":"lineage_defs lineage definition matrix, properly named rows (VOCs) columns (mutations) rel_counts (Optional) relative counts VOC (censored coverage). Must length nrow(lineage_defs). censoring (Optional) proportion observations mutation. Must length ncol(lineage_defs). absurd true, counts completely unrelated lineage proportions. Useful Monte Carlo estimation. verbose Print information simulation","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_coco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate counts and coverage from a lineage definition matrix — simulate_coco","text":"data frame counts coverage sampled mutations, ready used copt_binom().","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_coco.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate counts and coverage from a lineage definition matrix — simulate_coco","text":"default, uses negative binomial distribution counts uniform censoring coverage.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_lineage_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a small lineage matrix for testing — simulate_lineage_defs","title":"Simulate a small lineage matrix for testing — simulate_lineage_defs","text":"Creates matrix specified VoCs mutation names, randomly applies mutations. future version function may useful simulating mutations meaningful way, now useful testing purposes.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_lineage_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a small lineage matrix for testing — simulate_lineage_defs","text":"","code":"simulate_lineage_defs(   lins = c(\"BA.1\", \"BA.2\", \"B.1.1.529\"),   mutations = c(\"m3037T\", \"m22599A\", \"d221943\", \"i22205GAGCCAGAA\", \"m24469A\", \"d219879\",     \"m241T\") )"},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_lineage_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a small lineage matrix for testing — simulate_lineage_defs","text":"lins Names lineages mutations Names mutations","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/simulate_lineage_defs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a small lineage matrix for testing — simulate_lineage_defs","text":"properly structured lineage definitions matrix (rownames colnames).","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/summarise_lineages.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise the similarities in lineage matrices — summarise_lineages","title":"Summarise the similarities in lineage matrices — summarise_lineages","text":"Prints useful diagnostics screen, invisibly returning list.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/summarise_lineages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise the similarities in lineage matrices — summarise_lineages","text":"","code":"summarise_lineages(provoc_obj)"},{"path":"https://dasl-lab.github.io/provoc/reference/summarise_lineages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise the similarities in lineage matrices — summarise_lineages","text":"provoc_obj result provoc().","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/summary.provoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise results of model fitting — summary.provoc","title":"Summarise results of model fitting — summary.provoc","text":"Prints useful diagnostics screen, invisibly returning list.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/summary.provoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise results of model fitting — summary.provoc","text":"","code":"# S3 method for provoc summary(provoc_obj)"},{"path":"https://dasl-lab.github.io/provoc/reference/summary.provoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise results of model fitting — summary.provoc","text":"provoc_obj result provoc().","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/to_feasible.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a vector to the interior of the feasible region to be used as inits for constrOptim — to_feasible","title":"Transform a vector to the interior of the feasible region to be used as inits for constrOptim — to_feasible","text":"Transform vector interior feasible region used inits constrOptim","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/to_feasible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a vector to the interior of the feasible region to be used as inits for constrOptim — to_feasible","text":"","code":"to_feasible(x)"},{"path":"https://dasl-lab.github.io/provoc/reference/to_feasible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a vector to the interior of the feasible region to be used as inits for constrOptim — to_feasible","text":"x vector numbers","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/to_feasible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a vector to the interior of the feasible region to be used as inits for constrOptim — to_feasible","text":"vector length x sum values larger 0 less 1 values 0 1","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/total_lineage_defs.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a list of lineage definition matrices together. — total_lineage_defs","title":"Adds a list of lineage definition matrices together. — total_lineage_defs","text":"Entries represent total number times lineage/mutation combination used fitting. Useful checking whether mutation present given sample.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/total_lineage_defs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a list of lineage definition matrices together. — total_lineage_defs","text":"","code":"total_lineage_defs(ldef_list, summarise = \"add\")"},{"path":"https://dasl-lab.github.io/provoc/reference/total_lineage_defs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a list of lineage definition matrices together. — total_lineage_defs","text":"ldef_list list lineage definition matrices, extracted get_actual_defs.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/usher_barcodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain and clean barcodes file from usher_barcores in Freyja (or from disk) — usher_barcodes","title":"Obtain and clean barcodes file from usher_barcores in Freyja (or from disk) — usher_barcodes","text":"barcodes file several hundred megabytes, default function attempt save disk faster loading next time.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/usher_barcodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain and clean barcodes file from usher_barcores in Freyja (or from disk) — usher_barcodes","text":"","code":"usher_barcodes(   path = c(\"data/clean/\", \"data/\", \"./\")[1],   write = TRUE,   url =     \"https://raw.githubusercontent.com/andersen-lab/Freyja/main/freyja/data/usher_barcodes.csv\",   update = FALSE )"},{"path":"https://dasl-lab.github.io/provoc/reference/usher_barcodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain and clean barcodes file from usher_barcores in Freyja (or from disk) — usher_barcodes","text":"path location store barcodes file. Tries provided path well data/clean, data/, current directory. write file written disk avoid downloading? TRUE, uses first path exists. url URL (file path) barcodes file. Defaults GISAID data, user can specify barcode files (example, Freyja also keeps NextStrain version repo folder). update TRUE, overwrite existing barcodes file.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/usher_barcodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain and clean barcodes file from usher_barcores in Freyja (or from disk) — usher_barcodes","text":"function checks file called \"usher_barcodes.csv\" path provided. found, also checks common locations data/clean/, data/, current working folder. package recommended ensure file found matter code run .","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/usher_barcodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain and clean barcodes file from usher_barcores in Freyja (or from disk) — usher_barcodes","text":"","code":"# To save data into current directory bar <- usher_barcodes(path = \".\") #> Error in usher_barcodes(path = \".\"): could not find function \"usher_barcodes\"  # Using the `here` package (if code is stored in a git repo or Rproject) bar <- usher_barcodes(path = here(\"data/clean/\")) #> Error in usher_barcodes(path = here(\"data/clean/\")): could not find function \"usher_barcodes\""},{"path":"https://dasl-lab.github.io/provoc/reference/validate_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Inputs for provoc — validate_inputs","title":"Validate Inputs for provoc — validate_inputs","text":"Checks provided formula data frame valid analysis.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/validate_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Inputs for provoc — validate_inputs","text":"","code":"validate_inputs(formula, data)"},{"path":"https://dasl-lab.github.io/provoc/reference/validate_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Inputs for provoc — validate_inputs","text":"formula [stats]formula, specifying model fitted. data data frame containing variables model.","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/validate_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Inputs for provoc — validate_inputs","text":"None","code":""},{"path":"https://dasl-lab.github.io/provoc/reference/validate_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Inputs for provoc — validate_inputs","text":"","code":"# This function is internally used and not typically called by the user."},{"path":"https://dasl-lab.github.io/provoc/news/index.html","id":"version-054-what-will-i-do-with-all-these-lineage-definitions","dir":"Changelog","previous_headings":"","what":"Version 0.5.4: What will I do with all these lineage definitions?","title":"Version 0.5.4: What will I do with all these lineage definitions?","text":"Visualize mutations used plot_actual_defs(res, type = \"used\")! Visualize coverage mutation used plot_actual_defs(res, type = \"coverage\")! Colours always going pain, plot_lineage_defs2() overhauled little easier. error plot autoplot by_col NULL.","code":""},{"path":"https://dasl-lab.github.io/provoc/news/index.html","id":"version-053-what-does-that-lineage-definition-look-like-to-you","dir":"Changelog","previous_headings":"","what":"Version 0.5.3: What does that lineage definition look like to you?","title":"Version 0.5.3: What does that lineage definition look like to you?","text":"Added plotting function plot_lineage_defs() single lineage definition matrix. Made pretty. Allows user-specified colours, hard probably won’t used much ’m happy . Accepts output provoc(), extract actual lineage defintions used.","code":""},{"path":"https://dasl-lab.github.io/provoc/news/index.html","id":"version-052-call-it-what-you-want","dir":"Changelog","previous_headings":"","what":"Version 0.5.2: Call it what you want.","title":"Version 0.5.2: Call it what you want.","text":"Documentation significantly updated. BREAKING CHANGE: use argument = \"sra\", result column labelled sra (group, ).","code":""},{"path":"https://dasl-lab.github.io/provoc/news/index.html","id":"version-051-lineages-of-concern-doesnt-have-the-same-ring-to-it","dir":"Changelog","previous_headings":"","what":"Version 0.5.1: “Lineages of Concern” doesn’t have the same ring to it.","title":"Version 0.5.1: “Lineages of Concern” doesn’t have the same ring to it.","text":"varmat changed lineage_defs ’s much clearer. Minor documentation updates, mainly failed inheritance.","code":""}]
